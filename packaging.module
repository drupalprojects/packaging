<?php

/**
 * @file
 *
 * @author Tim Rohaly.    <http://drupal.org/user/202830>
 */


/** Maximum shipping weight for FedEx (non-Freight services) */
define('PACKAGE_WEIGHT_LIMIT_LBS', 150.0);  // 150lbs

/******************************************************************************
 * Unit conversion constants. Used by the unit conversion functions
 * packaging_weight_conversion() and packaging_length_conversion().
 ******************************************************************************/

/** Converts kilograms to kilograms. */
define('PACKAGING_KG_TO_KG', 1);
/** Converts kilograms to grams. */
define('PACKAGING_KG_TO_G',  1000);
/** Converts kilograms to pounds. */
define('PACKAGING_KG_TO_LB', 2.204622621849);
/** Converts kilograms to ounces. */
define('PACKAGING_KG_TO_OZ', 35.27396194958);

/** Converts grams to grams. */
define('PACKAGING_G_TO_G',   1);
/** Converts grams to kilograms. */
define('PACKAGING_G_TO_KG',  0.001);
/** Converts grams to pounds. */
define('PACKAGING_G_TO_LB',  0.002204622622);
/** Converts grams to ounces. */
define('PACKAGING_G_TO_OZ',  0.03527396195);

/** Converts pounds to pounds. */
define('PACKAGING_LB_TO_LB', 1);
/** Converts pounds to ounces. */
define('PACKAGING_LB_TO_OZ', 16);
/** Converts pounds to kilograms. */
define('PACKAGING_LB_TO_KG', 0.45359237);
/** Converts pounds to grams. */
define('PACKAGING_LB_TO_G',  453.59237);

/** Converts ounces to ounces. */
define('PACKAGING_OZ_TO_OZ', 1);
/** Converts ounces to pounds. */
define('PACKAGING_OZ_TO_LB', 0.0625);
/** Converts ounces to kilograms. */
define('PACKAGING_OZ_TO_KG', 0.028349523);
/** Converts ounces to grams. */
define('PACKAGING_OZ_TO_G',  28.349523125);

/** Converts inches to inches. */
define('PACKAGING_IN_TO_IN', 1);
/** Converts inches to feet. */
define('PACKAGING_IN_TO_FT', 0.083333333333);
/** Converts inches to centimeters. */
define('PACKAGING_IN_TO_CM', 2.54);
/** Converts inches to millimeters. */
define('PACKAGING_IN_TO_MM', 25.4);

/** Converts feet to feet. */
define('PACKAGING_FT_TO_FT', 1);
/** Converts feet to inches. */
define('PACKAGING_FT_TO_IN', 12);
/** Converts feet to centimeters. */
define('PACKAGING_FT_TO_CM', 30.48);
/** Converts feet to millimeters. */
define('PACKAGING_FT_TO_MM', 304.8);

/** Converts centimeters to centimeters. */
define('PACKAGING_CM_TO_CM', 1);
/** Converts centimeters to inches. */
define('PACKAGING_CM_TO_IN', 0.393700787402);
/** Converts centimeters to feet. */
define('PACKAGING_CM_TO_FT', 0.03280839895);
/** Converts centimeters to millimeters. */
define('PACKAGING_CM_TO_MM', 10);

/** Converts millimeters to millimeters. */
define('PACKAGING_MM_TO_MM', 1);
/** Converts millimeters to inches. */
define('PACKAGING_MM_TO_IN', 0.03937007874);
/** Converts millimeters to feet. */
define('PACKAGING_MM_TO_FT', 0.003280839895);
/** Converts millimeters to centimeters. */
define('PACKAGING_MM_TO_CM', 0.1);



/**
 * Packages products into boxes.
 *
 * Packages products into boxes subject to a shipping method weight limit,
 * corrected for any weight markup imposed by the administrator. All products
 * are assumed to have the same origin address and destination address. If you
 * want to package shipments that have multiple origin or destination addresses
 * you must divide up the products first, then call this function multiple
 * times.
 *
 * $package object returned from this routine contains the following members:
 *   - quantity:     Number of items in package.
 *   - price:        Value (sales price, in store currency) of items in package.
 *   - weight:       Actual weight of items in package, in store weight units.
 *   - weight_units: Set to store default. Taken from packaging_weight_units variable.
 *   - shipweight:   Computed weight of package, including markup.
 *
 * Store weight units are used internally for computation of package weights.
 * Each product may have its own weight units; these are converted to store
 * units and the package shipweight is returned in terms of the store weight
 * units. The store weight units are saved in the $package object for
 * completeness.
 *
 * @param $products
 *   An array of nodes of type product.
 *
 * @return
 *   An array of package objects, each containing one or more of the products.
 */
function packaging_package_products($products) {
  $packages = array();

  // Determine maximum weight of products we can put into one package while
  // staying below PACKAGE_WEIGHT_LIMIT_LBS. This number depends on the package
  // weight markup set in the FedEx module administration menu.
  $products_max_weight = PACKAGE_WEIGHT_LIMIT_LBS;
  $zero_markup = packaging_weight_markup(0);
  if ($zero_markup == 0) {
    // Weight markup is a multiplier, because 0 * multiplier = 0
    // This handles percentage markup too.
    $products_max_weight = $products_max_weight / packaging_weight_markup(1);
  }
  else {
    // Weight markup is an additive factor , because 0 + factor = factor != 0.
    $products_max_weight = $products_max_weight - $zero_markup;
  }

  // Convert $products_max_weight (which is defined in LB units) into store
  // default weight units so we can perform all calculations and return all
  // results in store default weight units.
  $products_max_weight = $products_max_weight * packaging_weight_conversion('LB', variable_get('packaging_weight_units', 'LB'));

  // Externals needed in PackagingStrategy:
  // packaging_weight_conversion()

  //if (variable_get('uc_fedex_all_in_one', TRUE)) {
    $strategy = new PackageAllInOne();
  //}
  //else {
  //  $strategy = new PackageEachInOwn();
 // }

  $strategy->setMaximumPackageWeight($products_max_weight);
  $strategy->setDefaultWeightUnits('LB');
  $strategy->setWeightMarkupFunction('packaging_weight_markup');

  $packages = $strategy->packageProducts($products);

  return $packages;
}

/**
 * Modifies the weight of a package to account for packaging material.
 *
 * @param $weight
 *   Shipping weight without any weight markup.
 *
 * @return
 *   Shipping weight after markup.
 */
function packaging_weight_markup($weight) {
  $markup = trim(variable_get('uc_fedex_weight_markup', '0'));
  $type   = variable_get('uc_fedex_weight_markup_type', 'percentage');

  if (is_numeric($markup)) {
    switch ($type) {
      case 'percentage':
        return $weight + $weight * floatval($markup) / 100;

      case 'multiplier':
        return $weight * floatval($markup);

      case 'mass':
        return $weight + floatval($markup);
    }
  }
  else {
    return $weight;
  }
}

/**
 * Implements hook_menu().
 */
function packaging_menu() {
  $items = array();

  $items['admin/settings/packaging'] = array(
    'title'            => 'Packaging',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('packaging_admin_settings'),
    'access arguments' => array('configure packaging'),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'packaging.admin.inc',
  );

  $items['packaging'] = array(
    'title' => 'Store',
    'description' => 'Administer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('print_info'),
    'access callback' => TRUE,
    'type'             => MENU_NORMAL_ITEM,
    'file'             => 'packaging.admin.inc',
  );

  return $items;
}


/******************************************************************************
 * CTools plugin hooks.
 ******************************************************************************/


/**
 * Implements hook_ctools_plugin_type().
 */
function packaging_ctools_plugin_type() {
  return array(
    'strategy' => array(
      // If FALSE, will ignore hook_MODULE_PLUGIN() and generate automatic hook.
      'use hooks' => TRUE,
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function packaging_ctools_plugin_directory($module, $plugin) {
  if (($module == 'packaging') && ($plugin == 'strategy')) {
    return 'strategies';
  }
}

/**
 * Implements hook_MODULE_PLUGIN().
 */
function packaging_packaging_strategy() {
  return array(
    'allinone' => array(
      'title' => t('All-in-one'),
      'handler' => array(
        'class' => 'PackageAllInOne',
      ),
    ),
    'eachinown' => array(
      'title' => t('Each in own'),
      'handler' => array(
        'class' => 'PackageEachInOwn',
      ),
    ),
    'byvolume' => array(
      'title' => t('By volume'),
      'handler' => array(
        'class' => 'PackageByVolume',
      ),
    ),
    'onepackage' => array(
      'title' => t('One package'),
      'handler' => array(
        'class' => 'PackageOnePackage',
      ),
    ),
    'averageweight' => array(
      'title' => t('Average weight'),
      'handler' => array(
        'class' => 'PackageAverageWeight',
      ),
    ),
    'averagevolume' => array(
      'title' => t('Average volume'),
      'handler' => array(
        'class' => 'PackageAverageVolume',
      ),
    ),
  );
}

/**
 * Helper function.  Fetches metadata for all strategy plugins.
 *
 * @param $id
 *   Plugin identifier, as returned by hook_packaging_strategy().
 *
 * @return
 *   An array of arrays with information about all available packaging
 *   strategies.
 */
function packaging_get_strategy($id) {
  ctools_include('plugins');
  return ctools_get_plugins('packaging', 'strategy', $id);
}

/**
 * Helper function.  Fetches metadata for all strategy plugins.
 *
 * @return
 *   An array of arrays with information about all available packaging
 *   strategies.
 */
function packaging_get_strategies() {
  ctools_include('plugins');
  return ctools_get_plugins('packaging', 'strategy');
}

/**
 * Instantiates a packaging strategy class.
 *
 * @param $id
 *   Plugin identifier, as returned by hook_packaging_strategy().
 *
 * @return
 *   Reference to the class instance.
 */
function packaging_get_instance($id) {
  // Cache strategy instances.
  $instances = &drupal_static(__FUNCTION__);

  if (!isset($instances[$id])) {
    // Not cached yet, so find and put in cache.
    $plugin = packaging_get_strategy($id);
    $class = ctools_plugin_get_class($plugin, 'handler');
    $instances[$id] = new $class();

    // Check that plugin class is a subclass of 'PackagingStrategy'.
    if (!is_subclass_of($instances[$id], 'PackagingStrategy')) {
      $instances[$id] = NULL;
    }
  }

  return $instances[$id];
}

/**
 * Gets the conversion ratio from one unit of weight to another.
 */
function packaging_weight_conversion($from_units, $to_units = NULL) {
  if (is_null($to_units)) {
    $to_units = variable_get('packaging_weight_units', 'lb');
  }
  $constant = 'PACKAGING_' . strtoupper($from_units) . '_TO_' . strtoupper($to_units);
  if (defined($constant) && ($conversion = constant($constant)) > 0) {
    return $conversion;
  }
  else {
    return 1;
  }
}

/**
 * Gets the conversion ratio from one unit of length to another.
 */
function packaging_length_conversion($from_units, $to_units = NULL) {
  if (is_null($to_units)) {
    $to_units = variable_get('packaging_length_units', 'in');
  }
  $constant = 'PACKAGING_' . strtoupper($from_units) . '_TO_' . strtoupper($to_units);
  if (defined($constant) && ($conversion = constant($constant)) > 0) {
    return $conversion;
  }
  else {
    return 1;
  }
}
