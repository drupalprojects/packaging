<?php

/**
 * @file
 *
 * @author Tim Rohaly.    <http://drupal.org/user/202830>
 */


/** Maximum shipping weight for FedEx (non-Freight services) */
define('PACKAGE_WEIGHT_LIMIT_LBS', 150.0);  // 150lbs


/**
 * Packages products into boxes.
 *
 * Packages products into boxes subject to the FedEx weight limit, corrected
 * for any weight markup imposed by the administrator. All products are
 * assumed to have the same origin address and destination address. If you want
 * to package shipments that have multiple origin or destination addresses you
 * must divide up the products first, then call this function multiple times.
 *
 * $package object returned from this routine contains the following members:
 *   - quantity:     Number of items in package.
 *   - price:        Value (sales price, in store currency) of items in package.
 *   - weight:       Actual weight of items in package, in store weight units.
 *   - weight_units: Set to store default, taken from uc_weight_unit variable.
 *   - shipweight:   Computed weight of package, including markup.
 *
 * Store weight units are used internally for computation of package weights.
 * Each product may have its own weight units; these are converted to store
 * units and the package shipweight is returned in terms of the store weight
 * units. The store weight units are saved in the $package object for
 * completeness.
 *
 * @param $products
 *   An array of nodes of type product.
 *
 * @return
 *   An array of package objects, each containing one or more of the products.
 */
function packaging_package_products($products) {
  $packages = array();

  // Determine maximum weight of products we can put into one package while
  // staying below PACKAGE_WEIGHT_LIMIT_LBS. This number depends on the package
  // weight markup set in the FedEx module administration menu.
  $products_max_weight = PACKAGE_WEIGHT_LIMIT_LBS;
  $zero_markup = packaging_weight_markup(0);
  if ($zero_markup == 0) {
    // Weight markup is a multiplier, because 0 * multiplier = 0
    // This handles percentage markup too.
    $products_max_weight = $products_max_weight / packaging_weight_markup(1);
  }
  else {
    // Weight markup is an additive factor , because 0 + factor = factor != 0.
    $products_max_weight = $products_max_weight - $zero_markup;
  }

  // Convert $products_max_weight (which is defined in LB units) into store
  // default weight units so we can perform all calculations and return all
  // results in store default weight units.
  $products_max_weight = $products_max_weight * uc_weight_conversion('LB', variable_get('uc_weight_unit', 'LB'));

  // Externals needed in Strategy
  // uc_weight_conversion()

  //if (variable_get('uc_fedex_all_in_one', TRUE)) {
    $strategy = new PackageAllInOne();
  //}
  //else {
  //  $strategy = new PackageEachInOwn();
 // }

  $strategy->setMaximumPackageWeight($products_max_weight);
  $strategy->setDefaultWeightUnits('LB');
  $strategy->setWeightMarkupFunction('packaging_weight_markup');

  $packages = $strategy->packageProducts($products);

  return $packages;
}

/**
 * Modify the weight of shipment before sending to FedEx for a quote.
 *
 * @param $weight
 *   Shipping weight without any weight markup.
 *
 * @return
 *   Shipping weight after markup.
 */
function packaging_weight_markup($weight) {
  $markup = trim(variable_get('uc_fedex_weight_markup', '0'));
  $type   = variable_get('uc_fedex_weight_markup_type', 'percentage');

  if (is_numeric($markup)) {
    switch ($type) {
      case 'percentage':
        return $weight + $weight * floatval($markup) / 100;

      case 'multiplier':
        return $weight * floatval($markup);

      case 'mass':
        return $weight + floatval($markup);
    }
  }
  else {
    return $weight;
  }
}

/**
 * Implements hook_menu().
 */
function packaging_menu() {
  $items = array();

  $items['packaging'] = array(
    'title' => 'Store',
    'description' => 'Administer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('print_info'),
    'access callback' => TRUE,
    'type'             => MENU_NORMAL_ITEM,
  );

  return $items;
}


/******************************************************************************
 * CTools plugin hooks.
 ******************************************************************************/


/**
 * Implements hook_ctools_plugin_type().
 */
function packaging_ctools_plugin_type() {
  return array(
    'strategy' => array(
      // If FALSE, will ignore hook_MODULE_PLUGIN() and generate automatic hook.
      'use hooks' => TRUE,

    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function packaging_ctools_plugin_directory($module, $plugin) {
  if (($module == 'packaging') && ($plugin == 'strategy')) {
    return 'strategies';
  }
}

/**
 * Implements hook_MODULE_PLUGIN().
 */
function packaging_packaging_strategy() {
  return array(
    'allinone' => array(
      'label' => t('All-in-one'),
      'handler' => array(
        'class' => 'PackageAllInOne',
        //'class' => 'package_all_in_one',
      ),
    //  'path' => drupal_get_path('module', 'packaging') . '/strategies',
    ),
    'eachinown' => array(
      'label' => t('Each in own'),
      'handler' => array(
        'class' => 'PackageEachInOwn',
        //'class' => 'package_each_in_own',
      ),
    ),
    'byvolume' => array(
      'label' => t('By volume'),
      'handler' => array(
        'class' => 'PackageByVolume',
        //'class' => 'package_by_volume',
      ),
    ),
    'onepackage' => array(
      'label' => t('One package'),
      'handler' => array(
        'class' => 'PackageOnePackage',
        //'class' => 'package_one_package',
      ),
    ),
    'averageweight' => array(
      'label' => t('Average weight'),
      'handler' => array(
        'class' => 'PackageAverageWeight',
        //'class' => 'package_average_weight',
      ),
    ),
    'averagevolume' => array(
      'label' => t('Average volume'),
      'handler' => array(
        'class' => 'PackageAverageVolume',
        //'class' => 'package_average_volume',
      ),
    ),
  );
}

/**
 * Helper function.  Fetches metadata for all strategy plugins.
 *
 * @return
 *   An array of arrays with information about all available packaging
 *   strategies.
 */
function packaging_get_strategy($id) {
  ctools_include('plugins');
  return ctools_get_plugins('packaging', 'strategy', $id);
}

/**
 * Helper function.  Fetches metadata for all strategy plugins.
 *
 * @return
 *   An array of arrays with information about all available packaging
 *   strategies.
 */
function packaging_get_strategies() {
  ctools_include('plugins');
  return ctools_get_plugins('packaging', 'strategy');
}

/**
 * Menu callback.
 */
function print_info() {

  $operations = packaging_get_strategies();
  $options = array();
  foreach ($operations as $id => $operation) {
    $options[$id] = $operation['label'];
  }

  $form['strategy'] = array(
    '#type' => 'select',
    '#title' => t('Please choose Strategy'),
    '#options' => $options,
  );

  $form['operations'] = array(
    '#markup' => '<pre>' . var_export($operations, TRUE) . '</pre>',
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Select strategy'),
  );

  return $form;
}

/**
 * Submit handler.
 */
function print_info_submit($form, &$form_state) {
  $operation = $form_state['values']['strategy'];
dpm($operation);
  if ($instance = packaging_get_instance($operation)) {
    drupal_set_message("Invoked packageProducts()<pre>" . var_export($instance->packageProducts(array(new Product(), new Product())), TRUE) ."</pre>");
  }
  else {
  }
}

function packaging_get_instance($id) {

  $instances = &drupal_static(__FUNCTION__);

  if (!isset($instances[$id])) {
    $plugin = packaging_get_strategy($id);
    $class = ctools_plugin_get_class($plugin, 'handler');
dpm($class);
    $instances[$id] = new $class();

    // Check that plugin class is a subclass of 'PackagingStrategy'.
    if (!is_subclass_of($instances[$id], 'PackagingStrategy')) {
      $instances[$id] = NULL;
    }
  }

  return $instances[$id];
}
