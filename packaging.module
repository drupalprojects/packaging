<?php

/**
 * @file
 *
 * @author Tim Rohaly.    <http://drupal.org/user/202830>
 */

use Drupal\Core\Routing\RouteMatchInterface;


/******************************************************************************
 * Unit conversion constants. Used by the unit conversion functions
 * packaging_weight_conversion() and packaging_length_conversion().
 ******************************************************************************/

/** Converts kilograms to kilograms. */
define('PACKAGING_KG_TO_KG', 1);
/** Converts kilograms to grams. */
define('PACKAGING_KG_TO_G',  1000);
/** Converts kilograms to pounds. */
define('PACKAGING_KG_TO_LB', 2.204622621849);
/** Converts kilograms to ounces. */
define('PACKAGING_KG_TO_OZ', 35.27396194958);

/** Converts grams to grams. */
define('PACKAGING_G_TO_G',   1);
/** Converts grams to kilograms. */
define('PACKAGING_G_TO_KG',  0.001);
/** Converts grams to pounds. */
define('PACKAGING_G_TO_LB',  0.002204622622);
/** Converts grams to ounces. */
define('PACKAGING_G_TO_OZ',  0.03527396195);

/** Converts pounds to pounds. */
define('PACKAGING_LB_TO_LB', 1);
/** Converts pounds to ounces. */
define('PACKAGING_LB_TO_OZ', 16);
/** Converts pounds to kilograms. */
define('PACKAGING_LB_TO_KG', 0.45359237);
/** Converts pounds to grams. */
define('PACKAGING_LB_TO_G',  453.59237);

/** Converts ounces to ounces. */
define('PACKAGING_OZ_TO_OZ', 1);
/** Converts ounces to pounds. */
define('PACKAGING_OZ_TO_LB', 0.0625);
/** Converts ounces to kilograms. */
define('PACKAGING_OZ_TO_KG', 0.028349523);
/** Converts ounces to grams. */
define('PACKAGING_OZ_TO_G',  28.349523125);

/** Converts inches to inches. */
define('PACKAGING_IN_TO_IN', 1);
/** Converts inches to feet. */
define('PACKAGING_IN_TO_FT', 0.083333333333);
/** Converts inches to centimeters. */
define('PACKAGING_IN_TO_CM', 2.54);
/** Converts inches to millimeters. */
define('PACKAGING_IN_TO_MM', 25.4);

/** Converts feet to feet. */
define('PACKAGING_FT_TO_FT', 1);
/** Converts feet to inches. */
define('PACKAGING_FT_TO_IN', 12);
/** Converts feet to centimeters. */
define('PACKAGING_FT_TO_CM', 30.48);
/** Converts feet to millimeters. */
define('PACKAGING_FT_TO_MM', 304.8);

/** Converts centimeters to centimeters. */
define('PACKAGING_CM_TO_CM', 1);
/** Converts centimeters to inches. */
define('PACKAGING_CM_TO_IN', 0.393700787402);
/** Converts centimeters to feet. */
define('PACKAGING_CM_TO_FT', 0.03280839895);
/** Converts centimeters to millimeters. */
define('PACKAGING_CM_TO_MM', 10);

/** Converts millimeters to millimeters. */
define('PACKAGING_MM_TO_MM', 1);
/** Converts millimeters to inches. */
define('PACKAGING_MM_TO_IN', 0.03937007874);
/** Converts millimeters to feet. */
define('PACKAGING_MM_TO_FT', 0.003280839895);
/** Converts millimeters to centimeters. */
define('PACKAGING_MM_TO_CM', 0.1);



/**
 * Packages products into boxes.
 *
 * Packages products into boxes subject to a shipping method weight limit,
 * corrected for any weight markup imposed by the administrator. All products
 * are assumed to have the same origin address and destination address. If you
 * want to package shipments that have multiple origin or destination addresses
 * you must divide up the products first, then call this function multiple
 * times.
 *
 * The $package object returned from this routine contains:
 *   - quantity:     Number of items in package.
 *   - price:        Value (sales price, in store currency) of items in package.
 *   - weight:       Actual weight of items in package, in default weight units.
 *   - weight_units: Set to Context default. Taken from packaging_weight_units
 *                   variable.
 *   - shipweight:   Computed weight of package, including markup.
 *
 * Store weight units are used internally for computation of package weights.
 * Each product may have its own weight units; these are converted to store
 * units and the package shipweight is returned in terms of the store weight
 * units. The store weight units are saved in the $package object for
 * completeness.
 *
 * @param $products
 *   An array of nodes of type Product.
 *
 * @return
 *   An array of Package objects, each containing one or more of
 *   the products.
 */
function packaging_package_products(Context $context, array $products) {
  $packaging_config = \Drupal::config('packaging.settings');

  $packages = array();

  // Determine maximum weight of products we can put into one package while
  // staying below $context->getMaximumPackageWeight(). This number depends on
  // the package weight markup set in the packaging administration menu.
  $products_max_weight = $context->getMaximumPackageWeight();
  $zero_markup = packaging_weight_markup(0);
  if ($zero_markup == 0) {
    // Weight markup is a multiplier, because 0 * multiplier = 0
    // This handles percentage markup too.
    $products_max_weight = $products_max_weight / packaging_weight_markup(1);
  }
  else {
    // Weight markup is an additive factor , because 0 + factor = factor != 0.
    $products_max_weight = $products_max_weight - $zero_markup;
  }

  // Convert $products_max_weight (which is defined in LB units) into store
  // default weight units so we can perform all calculations and return all
  // results in store default weight units.
  //$products_max_weight = $products_max_weight * packaging_weight_conversion($context->getDefaultWeightUnits(), $packaging_config->get('weight_units'));

  $context->setMaximumPackageWeight($products_max_weight);

  // Group packages by the address from which they will be shipped. We will
  // keep track of the different addresses as values in the $shipment array.
//  $shipment = array();
//  foreach ($products as $product) {
//    $key = NULL;
//    $address = uc_quote_get_default_shipping_address($product->getNid());
//    foreach ($addresses as $index => $value) {
//      if ($address->isSamePhysicalLocation($value)) {
//        // This is an existing address.
//        $key = $index;
//        break;
//      }
//    }

//    if (!isset($key)) {
//      // This is a new address. Increment the address counter $last_key
//      // instead of using [] so that it can be used in $packages and
//      // $addresses.
//      $addresses[++$last_key] = $address;
//      $key = $last_key;
//      $packages[$key] = array(0 => _uc_usps_new_package());
//    }

  if (module_exists('uc_product')) {
    $products = Product::constructFromUbercartProductMultiple($products);
  }
  elseif (module_exists('commerce_product')) {
    $products = Product::constructFromCommerceProductMultiple($products);
  }

  $packages = $context->packageProducts($products);

  return $packages;
}

/**
 * Modifies the weight of a package to account for packaging material.
 *
 * @param $weight
 *   Shipping weight without any weight markup.
 *
 * @return
 *   Shipping weight after markup.
 */
function packaging_weight_markup($weight) {
  $packaging_config = \Drupal::config('fedex.settings');
  $markup = trim($packaging_config->get('weight_markup', '0'));
  $type   = $packaging_config->get('weight_markup_type', 'percentage');

  if (is_numeric($markup)) {
    switch ($type) {
      case 'percentage':
        return $weight + $weight * floatval($markup) / 100;

      case 'multiplier':
        return $weight * floatval($markup);

      case 'mass':
        return $weight + floatval($markup);
    }
  }
  else {
    return $weight;
  }
}

/**
 * Implements hook_help().
 */
function packaging_help($route_name = 'help.page.packaging', RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.packaging':
      //\Drupal::ModuleHandler()->loadInclude('packaging', 'inc', 'packaging.help');
      return t('This module provides heuristic algorithms for splitting shippable orders into physical packages. The intent is that shipping quotes modules will use these algorithms in lieu of coding their own packaging routines. New algorithms may easily be defined using the plugin architecture of this module.');
      break;

    case 'packaging.settings':
      return t('Configuration settings for the Packaging module.');
      break;
  }
}

/**
 * Implements hook_MODULE_PLUGIN().
 */
function packaging_packaging_strategy() {
  return array(
    'allinone' => array(
      'title' => t('All-in-one (first fit)'),
      'handler' => array(
        'class' => 'PackageAllInOne',
      ),
    ),
    'lastfit' => array(
      'title' => t('All-in-one (last fit)'),
      'handler' => array(
        'class' => 'PackageLastFit',
      ),
    ),
    'nextfit' => array(
      'title' => t('All-in-one (next fit)'),
      'handler' => array(
        'class' => 'PackageNextFit',
      ),
    ),
    'eachinown' => array(
      'title' => t('Each in own'),
      'handler' => array(
        'class' => 'PackageEachInOwn',
      ),
    ),
    'byvolume' => array(
      'title' => t('By volume'),
      'handler' => array(
        'class' => 'PackageByVolume',
      ),
    ),
    'onepackage' => array(
      'title' => t('One package'),
      'handler' => array(
        'class' => 'PackageOnePackage',
      ),
    ),
    'averageweight' => array(
      'title' => t('Average weight'),
      'handler' => array(
        'class' => 'PackageAverageWeight',
      ),
    ),
    'averagevolume' => array(
      'title' => t('Average volume'),
      'handler' => array(
        'class' => 'PackageAverageVolume',
      ),
    ),
    'bykey' => array(
      'title' => t('By key'),
      'handler' => array(
        'class' => 'PackageByKey',
      ),
    ),
  );
}

/**
 * Helper function. Fetches metadata for all strategy plugins.
 *
 * @param $id
 *   Plugin identifier, as returned by hook_packaging_strategy().
 *
 * @return
 *   An array of arrays with information about all available packaging
 *   strategies.
 */
function packaging_get_strategy($id) {
  $packaging_type_manager = \Drupal::service('plugin.manager.packaging');
  return $packaging_type_manager->getDefinition($id);
}

/**
 * Helper function. Fetches metadata for all strategy plugins.
 *
 * @return
 *   An array of arrays with information about all available packaging
 *   strategies.
 */
function packaging_get_strategies() {
  $packaging_type_manager = \Drupal::service('plugin.manager.packaging');
  return $packaging_type_manager->getDefinitions();
}

/**
 * Instantiates a packaging strategy class.
 *
 * @param $id
 *   Plugin identifier, as returned by hook_packaging_strategy().
 *
 * @return
 *   Reference to the class instance.
 */
function packaging_get_instance($id) {
  // Cache strategy instances.
  $instances = &drupal_static(__FUNCTION__);
  $packaging_type_manager = \Drupal::service('plugin.manager.packaging');

  if (!isset($instances[$id])) {
    // Not cached yet, so find and put in cache.
    $plugin = packaging_get_strategy($id);
    $instances[$id] = $packaging_type_manager->createInstance($id);

    // Check that the plugin class implements Strategy.
    //if (!($instances[$id] instanceof \Drupal\lib\packaging\Strategy)) {
    //  $instances[$id] = NULL;
    //}
  }

  return $instances[$id];
}

/**
 * Gets the conversion ratio from one unit of weight to another.
 */
function packaging_weight_conversion($from_units, $to_units = NULL) {
  if (is_null($to_units)) {
    $packaging_config = \Drupal::config('packaging.settings');
    $to_units = $packaging_config->get('weight_units');
  }
  $constant = 'PACKAGING_' . strtoupper($from_units) . '_TO_' . strtoupper($to_units);
  if (defined($constant) && ($conversion = constant($constant)) > 0) {
    return $conversion;
  }
  else {
    return 1;
  }
}

/**
 * Gets the conversion ratio from one unit of length to another.
 */
function packaging_length_conversion($from_units, $to_units = NULL) {
  if (is_null($to_units)) {
    $packaging_config = \Drupal::config('packaging.settings');
    $to_units = $packaging_config->get('length_units');
  }
  $constant = 'PACKAGING_' . strtoupper($from_units) . '_TO_' . strtoupper($to_units);
  if (defined($constant) && ($conversion = constant($constant)) > 0) {
    return $conversion;
  }
  else {
    return 1;
  }
}
