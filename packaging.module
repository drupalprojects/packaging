<?php

/**
 * @file
 *
 * @author Tim Rohaly.    <http://drupal.org/user/202830>
 */


/** Maximum shipping weight for FedEx (non-Freight services) */
define('PACKAGE_WEIGHT_LIMIT_LBS', 150.0);  // 150lbs


/**
 * Packages products into boxes.
 *
 * Packages products into boxes subject to the FedEx weight limit, corrected
 * for any weight markup imposed by the administrator. All products are
 * assumed to have the same origin address and destination address. If you want
 * to package shipments that have multiple origin or destination addresses you
 * must divide up the products first, then call this function multiple times.
 *
 * $package object returned from this routine contains the following members:
 *   - quantity:     Number of items in package.
 *   - price:        Value (sales price, in store currency) of items in package.
 *   - weight:       Actual weight of items in package, in store weight units.
 *   - weight_units: Set to store default, taken from uc_weight_unit variable.
 *   - shipweight:   Computed weight of package, including markup.
 *
 * Store weight units are used internally for computation of package weights.
 * Each product may have its own weight units; these are converted to store
 * units and the package shipweight is returned in terms of the store weight
 * units. The store weight units are saved in the $package object for
 * completeness.
 *
 * @param $products
 *   An array of nodes of type product.
 *
 * @return
 *   An array of package objects, each containing one or more of the products.
 */
function packaging_package_products($products) {
  $packages = array();

  // Determine maximum weight of products we can put into one package while
  // staying below PACKAGE_WEIGHT_LIMIT_LBS. This number depends on the package
  // weight markup set in the FedEx module administration menu.
  $products_max_weight = PACKAGE_WEIGHT_LIMIT_LBS;
  $zero_markup = packaging_weight_markup(0);
  if ($zero_markup == 0) {
    // Weight markup is a multiplier, because 0 * multiplier = 0
    // This handles percentage markup too.
    $products_max_weight = $products_max_weight / packaging_weight_markup(1);
  }
  else {
    // Weight markup is an additive factor , because 0 + factor = factor != 0.
    $products_max_weight = $products_max_weight - $zero_markup;
  }

  // Convert $products_max_weight (which is defined in LB units) into store
  // default weight units so we can perform all calculations and return all
  // results in store default weight units.
  $products_max_weight = $products_max_weight * uc_weight_conversion('LB', variable_get('uc_weight_unit', 'LB'));

  // Externals needed in Strategy
  // uc_weight_conversion()

  //if (variable_get('uc_fedex_all_in_one', TRUE)) {
    $strategy = new PackageAllInOne();
  //}
  //else {
  //  $strategy = new PackageEachInOwn();
 // }

  $strategy->setMaximumPackageWeight($products_max_weight);
  $strategy->setDefaultWeightUnits('LB');
  $strategy->setWeightMarkupFunction('packaging_weight_markup');

  $packages = $strategy->strategy($products);

  return $packages;
}

/**
 * Modify the weight of shipment before sending to FedEx for a quote.
 *
 * @param $weight
 *   Shipping weight without any weight markup.
 *
 * @return
 *   Shipping weight after markup.
 */
function packaging_weight_markup($weight) {
  $markup = trim(variable_get('uc_fedex_weight_markup', '0'));
  $type   = variable_get('uc_fedex_weight_markup_type', 'percentage');

  if (is_numeric($markup)) {
    switch ($type) {
      case 'percentage':
        return $weight + $weight * floatval($markup) / 100;

      case 'multiplier':
        return $weight * floatval($markup);

      case 'mass':
        return $weight + floatval($markup);
    }
  }
  else {
    return $weight;
  }
}

/**
 * Implements hook_ctools_plugin_api_hook_name().
 */
function packaging_ctools_plugin_api_hook_name() {
  return 'packaging_api';
}

// Declare API compatibility on behalf of core modules:

/**
 * Implements hook_packaging_api().
 *
 * This one is used as the base to reduce errors when updating.
 */
function packaging_packaging_api() {
  return array(
    // in your modules do *not* use packaging_api_version()!!!
    'api' => packaging_api_version(),
    'path' => drupal_get_path('module', 'packaging') . '/strategies',
  );
}

/**
 * Advertises the current Packaging API version.
 */
function packaging_api_version() {
  return '1.0';
}

/**
 * Include views .inc files as necessary.
 */
function packaging_include($file) {
  ctools_include($file, 'strategies');
}

/**
 * Load views files on behalf of modules.
 */
function packaging_module_include($api, $reset = FALSE) {
  if ($reset) {
    $cache = &drupal_static('ctools_plugin_api_info');
    if (isset($cache['packaging']['strategies'])) {
      unset($cache['packaging']['strategies']);
    }
  }
  ctools_include('plugins');
  return ctools_plugin_api_include('packaging', $api, packaging_api_minimum_version(), packaging_api_version());
}

/**
 * Get a list of modules that support the current views API.
 */
function packaging_get_module_apis($api = 'views', $reset = FALSE) {
  if ($reset) {
    $cache = &drupal_static('ctools_plugin_api_info');
    if (isset($cache['packagin']['views'])) {
      unset($cache['packagin']['views']);
    }
  }
  ctools_include('plugins');
  return ctools_plugin_api_info('packagin', $api, packaging_api_minimum_version(), packaging_api_version());
}
