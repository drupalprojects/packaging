<?php

/**
 * @file
 * Packaging Unit tests.
 */

/**
 * SimpleTests for Packaging.
 */
class PackagingUnitTestCase extends DrupalUnitTestCase {

  protected $products = array();

  public static function getInfo() {
    return array(
      'name' => 'Packaging',
      'description' => 'Test Packaging.',
      'group' => 'Packaging',
    );
  }

  /**
   * Overrides DrupalUnitTestCase::setUp().
   */
  function setUp() {
    parent::setUp();

    // Load all files needed for these Unit tests.
    $this->loadIncludes();

    // Create test products for packaging.
    $this->products = $this->createTestProducts();
    //debug($this->products);
  }

  /**
   * Test "All-in-one" packaging, where all products are put into one package
   * subject only to package maximum weight.  If maximum weight is exceeded,
   * a new package is created.
   */
  function testPackageAllInOne() {
    $this->pass(t('Testing PackageAllInOne strategy'));

    $context = new PackagingContext();
    $context->setMaximumPackageWeight(15);
    $context->setDefaultWeightUnits('LB');
    $context->setWeightMarkupFunction('packaging_weight_markup');
    $context->setStrategy(new PackageAllInOne());

    $packages = $context->packageProducts($this->products);

    //debug($packages);

    // Product aggregates.
    $product_aggregate = $this->getProductAggregate($context, $this->products);

    // Package aggregates.
    $package_aggregate = $this->getPackageAggregate($context, $packages);

    // Test to see if the strategy produced the expected total weight.
    $this->assertTrue(
      abs((float) $package_aggregate->getWeight() - (float) $product_aggregate->getWeight()) < 0.0001,
      t('Total weight of packages equals total weight of products.')
    );

    // Test to see if the strategy produced the expected weight markup.
    $this->assertTrue(
      abs((float) $package_aggregate->getShipWeight() - (float) packaging_weight_markup((float) $product_aggregate->getWeight())) < 0.0001,
      t('Ship weight of packages equals total weight of products with markup.')
    );

    // Actual number of boxes.
    $actual_number_of_packages = count($packages);

    // Calculate minimum possible number of boxes.
    $minimum_number_of_packages = ceil($product_aggregate->getWeight() / $context->getMaximumPackageWeight());

    // Test to see if the strategy produced the expected number of boxes.
    $this->assertTrue(
      ($actual_number_of_packages >= $minimum_number_of_packages),
      t('Number of packages made %made is greater than or equal to minimum possible number %min.', array('%made' => $actual_number_of_packages, '%min' => $minimum_number_of_packages))
    );

    // Test different origin addresses

    // Test different destination addresses

    // Test effect of maximum package weight

    // Test effect of package quantity

    // Test effect of weight markup
  }

  /**
   * Test Each in Own packaging.
   */
  function testPackageEachInOwn() {
    $this->pass(t('Testing PackageEachInOwn strategy'));

    $context = new PackagingContext();
    $context->setMaximumPackageWeight(15);
    $context->setDefaultWeightUnits('LB');
    $context->setWeightMarkupFunction('packaging_weight_markup');
    $context->setStrategy(new PackageEachInOwn());

    $packages = $context->packageProducts($this->products);

    //debug($packages);

    // Product aggregates.
    $product_aggregate = $this->getProductAggregate($context, $this->products);

    // Package aggregates.
    $package_aggregate = $this->getPackageAggregate($context, $packages);

    // Test to see if the strategy produced the expected total weight.
    $this->assertTrue(
      abs((float) $package_aggregate->getWeight() - (float) $product_aggregate->getWeight()) < 0.0001,
      t('Total weight of packages equals total weight of products.')
    );

    // Test to see if the strategy produced the expected weight markup.
    $this->assertTrue(
      abs((float) $package_aggregate->getShipWeight() - (float) packaging_weight_markup((float) $product_aggregate->getWeight())) < 0.0001,
      t('Ship weight of packages equals total weight of products with markup.')
    );

    // Actual number of boxes.
    $actual_number_of_packages = count($packages);

    // Calculate expected number of boxes.
    $expected_number_of_packages = 0;
    foreach ($this->products as $product) {
      $expected_number_of_packages += ceil($product->getQuantity() / $product->getPackageQuantity());
    }

    // Test to see if the strategy produced the expected number of boxes.
    $this->assertTrue(
      ($actual_number_of_packages == $expected_number_of_packages),
      t('Number of packages equals expectation.')
    );
  }

  /**
   * Test One package strategy.
   */
  function testPackageOnePackage() {
    $this->pass(t('Testing PackageOnePackage strategy'));

    $context = new PackagingContext();
    $context->setMaximumPackageWeight(15);
    $context->setDefaultWeightUnits('LB');
    $context->setWeightMarkupFunction('packaging_weight_markup');
    $context->setStrategy(new PackageOnePackage());

    $packages = $context->packageProducts($this->products);

    //debug($packages);

    // Product aggregates.
    $product_aggregate = $this->getProductAggregate($context, $this->products);

    // Package aggregates.
    $package_aggregate = $this->getPackageAggregate($context, $packages);

    // Test to see if the strategy produced the expected total weight.
    $this->assertTrue(
      abs($package_aggregate->getWeight() - $product_aggregate->getWeight()) < 0.0001,
      t('Total weight of packages equals total weight of products.')
    );

    // Test to see if the strategy produced the expected weight markup.
    $this->assertTrue(
      abs($package_aggregate->getShipWeight() - packaging_weight_markup($product_aggregate->getWeight())) < 0.001,
      t('Ship weight of packages equals total weight of products with markup.')
    );

    // Actual number of boxes.
    $actual_number_of_packages = count($packages);

    // Calculate expected number of boxes.
    $expected_number_of_packages = 1;

    // Test to see if the strategy produced the expected number of boxes.
    $this->assertTrue(
      ($actual_number_of_packages == $expected_number_of_packages),
      t('Number of packages equals expectation.')
    );
  }

  /**
   * Test "By volume" packaging, where all products are put into one package
   * subject only to package maximum volume.  If maximum volume is exceeded,
   * a new package is created.
   */
  function testPackageByVolume() {
    $this->pass(t('Testing PackageByVolume strategy'));

    $context = new PackagingContext();
    $context->setMaximumPackageVolume(50);
    $context->setDefaultLengthUnits('IN');
    $context->setDefaultWeightUnits('LB');
    $context->setWeightMarkupFunction('packaging_weight_markup');
    $context->setStrategy(new PackageByVolume());

    $packages = $context->packageProducts($this->products);

    //debug($packages);

    // Product aggregates.
    $product_aggregate = $this->getProductAggregate($context, $this->products);

    // Package aggregates.
    $package_aggregate = $this->getPackageAggregate($context, $packages);

    // Test to see if the strategy produced the expected total weight.
    $this->assertTrue(
      abs((float) $package_aggregate->getWeight() - (float) $product_aggregate->getWeight()) < 0.0001,
      t('Total weight of packages equals total weight of products.')
    );

    // Test to see if the strategy produced the expected weight markup.
    $this->assertTrue(
      abs((float) $package_aggregate->getShipWeight() - (float) packaging_weight_markup((float) $product_aggregate->getWeight())) < 0.0001,
      t('Ship weight of packages equals total weight of products with markup.')
    );

    // Actual number of boxes.
    $actual_number_of_packages = count($packages);

    // Calculate minimum possible number of boxes.
    $minimum_number_of_packages = ceil($product_aggregate->getVolume() / $context->getMaximumPackageVolume());

    // Test to see if the strategy produced the expected number of boxes.
    $this->assertTrue(
      ($actual_number_of_packages >= $minimum_number_of_packages),
      t('Number of packages made %made is greater than or equal to minimum possible number %min.', array('%made' => $actual_number_of_packages, '%min' => $minimum_number_of_packages))
    );

    // Test different origin addresses

    // Test different destination addresses

    // Test effect of maximum package weight

    // Test effect of package quantity

    // Test effect of weight markup
  }

  /**
   * Test package by average weight strategy.
   */
  function testPackageAverageWeight() {
    $this->pass(t('Testing PackageAverageWeight strategy'));

    $context = new PackagingContext();
    $context->setMaximumPackageWeight(15);
    $context->setDefaultWeightUnits('LB');
    $context->setWeightMarkupFunction('packaging_weight_markup');
    $context->setStrategy(new PackageAverageWeight());

    $packages = $context->packageProducts($this->products);

    // Product aggregates.
    $product_aggregate = $this->getProductAggregate($context, $this->products);

    // Package aggregates.
    $package_aggregate = $this->getPackageAggregate($context, $packages);

    // Test to see if the strategy produced the expected total weight.
    $this->assertTrue(
      abs($package_aggregate->getWeight() - $product_aggregate->getWeight()) < 0.0001,
      t('Total weight of packages equals total weight of products.')
    );

    // Test to see if the strategy produced the expected weight markup.
    $this->assertTrue(
      abs($package_aggregate->getShipWeight() - packaging_weight_markup($product_aggregate->getWeight())) < 0.0001,
      t('Ship weight of packages equals total weight of products with markup.')
    );

    // Actual number of boxes.
    $actual_number_of_packages = count($packages);

    // Calculate expected number of boxes.
    $expected_number_of_packages = ceil($product_aggregate->getWeight() / $context->getMaximumPackageWeight());

    // Test to see if the strategy produced the expected number of boxes.
    $this->assertTrue(
      ($actual_number_of_packages == $expected_number_of_packages),
      t('Number of packages equals expectation.')
    );
  }

  /**
   * Test package by average volume strategy.
   */
  function testPackageAverageVolume() {
    $this->pass(t('Testing PackageAverageVolume strategy'));

    $context = new PackagingContext();
    $context->setMaximumPackageWeight(15);
    $context->setDefaultWeightUnits('LB');
    $context->setWeightMarkupFunction('packaging_weight_markup');
    $context->setStrategy(new PackageAverageVolume());

    $packages = $context->packageProducts($this->products);

    // Actual number of boxes.
    $actual_number_of_packages = count($packages);

    // Calculate expected number of boxes.
    //$expected_number_of_packages = ceil($product_aggregate->getVolume() / $context->getMaximumPackageVolume());

    // Test to see if the strategy produced the expected number of boxes.
    //$this->assertTrue(
    //  ($actual_number_of_packages == $expected_number_of_packages),
    //  t('Number of packages equals expectation.')
    //);
  }

  /**
   * Test custom strategy.
   */
  function testPackageCustomStrategy() {
    $this->pass(t('Testing PackageCustomStrategy strategy'));

    // Test plugin system to see that any custom plugin gets picked up.
    // PackageCustomStrategy is defined by the packaging_test module.
    //$strategy = packaging_get_instance('custom');

    $context = new PackagingContext();
    $context->setMaximumPackageWeight(15);
    $context->setDefaultWeightUnits('LB');
    $context->setWeightMarkupFunction('packaging_weight_markup');
    //$context->setStrategy($strategy);
    $context->setStrategy(new PackageCustomStrategy());

    $packages = $context->packageProducts($this->products);


    // Product aggregates.
    $product_aggregate = $this->getProductAggregate($context, $this->products);

    // Package aggregates.
    $package_aggregate = $this->getPackageAggregate($context, $packages);

    // Test to see if the strategy produced the expected total weight.
    $this->assertTrue(
      abs($package_aggregate->getWeight() - $product_aggregate->getWeight()) < 0.0001,
      t('Total weight of packages equals total weight of products.')
    );

    // Test to see if the strategy produced the expected weight markup.
    $this->assertTrue(
      abs($package_aggregate->getShipWeight() - packaging_weight_markup($product_aggregate->getWeight())) < 0.001,
      t('Ship weight of packages equals total weight of products with markup.')
    );

    // Actual number of boxes.
    $actual_number_of_packages = count($packages);

    // Calculate expected number of boxes.
    $expected_number_of_packages = 23;

    // Test to see if the strategy produced the expected number of boxes.
    $this->assertTrue(
      ($actual_number_of_packages == $expected_number_of_packages),
      t('Number of packages equals expectation.')
    );

  }


  /****************************************************************************
   * Utility Functions                                                        *
   ****************************************************************************/


  /**
   * Loads needed include files.
   *
   * DrupalUnitTestCase::setUp() does NOT install modules, so any files we
   * require for our tests must be included here.
   */
  function loadIncludes() {
    drupal_load('module', 'packaging');
    module_load_include('inc', 'packaging', 'classes/package');
    module_load_include('inc', 'packaging', 'classes/product');
    module_load_include('inc', 'packaging', 'classes/context');
    module_load_include('inc', 'packaging', 'classes/strategy');
    module_load_include('inc', 'packaging', 'strategies/package_each_in_own');
    module_load_include('inc', 'packaging', 'strategies/package_all_in_one');
    module_load_include('inc', 'packaging', 'strategies/package_one_package');
    module_load_include('inc', 'packaging', 'strategies/package_average_volume');
    module_load_include('inc', 'packaging', 'strategies/package_by_volume');
    module_load_include('inc', 'packaging', 'strategies/package_average_weight');
    drupal_load('module', 'packaging_test');
    module_load_include('inc', 'packaging_test', 'strategies/package_custom_strategy');
    //drupal_load('module', 'ctools');
  }

  /**
   * Returns a Product object containing aggregate information.
   */
  function getProductAggregate(PackagingContext $context, array $products) {
    $product_aggregate = new PackagingProduct();
    $product_aggregate->setWeightUnits($context->getDefaultWeightUnits());
    foreach ($this->products as $product) {
      $product_aggregate->setWeight($product_aggregate->getWeight() + $product->getQuantity() * $product->getWeight() * packaging_weight_conversion($product->getWeightUnits(), $context->getDefaultWeightUnits()));
      $product_aggregate->setQuantity($product_aggregate->getQuantity() + $product->getQuantity());
    }
    $this->pass(t('Total weight of products = %total %units.', array('%total' => $product_aggregate->getWeight(), '%units' => $context->getDefaultWeightUnits())));

    return $product_aggregate;
  }

  /**
   * Returns a Package object containing aggregate information.
   */
  function getPackageAggregate(PackagingContext $context, array $packages) {
    $package_aggregate = new PackagingPackage();
    $package_aggregate->setWeightUnits($context->getDefaultWeightUnits());
    foreach ($packages as $package) {
      $package_aggregate->setWeight($package_aggregate->getWeight() + $package->getWeight());
      $package_aggregate->setShipWeight($package_aggregate->getShipWeight() + $package->getShipWeight());
      $package_aggregate->setQuantity($package_aggregate->getQuantity() + $package->getQuantity());
    }
    $this->pass(t('Total package weight = %total %units.', array('%total' => $package_aggregate->getWeight(), '%units' => $context->getDefaultWeightUnits())));
    $this->pass(t('Total package weight after weight markup = %total %units.', array('%total' => $package_aggregate->getShipWeight(), '%units' => $context->getDefaultWeightUnits())));
    $this->pass(t('Total ship weight of packages = %total %units.', array('%total' => $package_aggregate->getShipWeight(), '%units' => $context->getDefaultWeightUnits())));

    return $package_aggregate;
  }

  /**
   * Creates a new product.
   */
  function createTestProducts() {
    $products = array();
    $number = mt_rand(5, 10);
    for ($i = 0; $i < $number; $i++) {
      $products[] = PackagingProduct::constructFromUbercartProduct($this->createProduct());
    }
    return $products;
  }

  /**
   * Creates a new product.
   */
  function createProduct($product = array()) {
    // Set the default required fields.
    $weight_units = array('lb', 'kg', 'oz', 'g');
    // Feet are too big!  Need to re-do this so volumes aren't
    // ridiculous if ft are chosen. Until then, comment it out.
    //$length_units = array('in', 'ft', 'cm', 'mm');
    $length_units = array('in', 'cm', 'mm');
    $product += array(
      'type' => 'product',
      'model' => $this->randomName(8),
      'list_price' => mt_rand(1, 9999),
      'cost' => mt_rand(1, 9999),
      'sell_price' => mt_rand(1, 9999),
      'weight' => mt_rand(1, 5),
      'weight_units' => array_rand(array_flip($weight_units)),
      'length' => mt_rand(1, 4),
      'width' => mt_rand(1, 4),
      'height' => mt_rand(1, 4),
      'length_units' => array_rand(array_flip($length_units)),
      'pkg_qty' => mt_rand(1, 10),
      'default_qty' => 1,
      'qty' => mt_rand(1, 5),
      'ordering' => mt_rand(-25, 25),
      'shippable' => TRUE,
    );

    return (object) $product;
  }
}
