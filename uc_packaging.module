<?php

/**
 * @file
 * FedEx Web Services Rate / Available Services Quote.
 *
 * Shipping quote module that interfaces with the FedEx Web Services API
 * to get rates for small package shipments.  Implements a SOAP Web Service
 * client.
 *
 * @author Tim Rohaly.    <http://drupal.org/user/202830>
 */


/** Maximum shipping weight for FedEx (non-Freight services) */
define('PACKAGE_WEIGHT_LIMIT_LBS', 150.0);  // 150lbs

/**
 * Modify the weight of shipment before sending to FedEx for a quote.
 *
 * @param $weight
 *   Shipping weight without any weight markup.
 *
 * @return
 *   Shipping weight after markup.
 */
function uc_packaging_weight_markup($weight) {
  $markup = trim(variable_get('uc_packaging_weight_markup', '0'));
  $type   = variable_get('uc_packaging_weight_markup_type', 'percentage');

  if (is_numeric($markup)) {
    switch ($type) {
      case 'percentage':
        return $weight + $weight * floatval($markup) / 100;

      case 'multiplier':
        return $weight * floatval($markup);

      case 'mass':
        return $weight + floatval($markup);
    }
  }
  else {
    return $weight;
  }
}


/**
 * Packages products into boxes subject to the FedEx weight limit,
 * corrected for any weight markup imposed by the administrator.
 *
 * $package object returned from this routine contains the following members:
 *   ->quantity     Number of items in package
 *   ->price        Value (sales price, in store currency) of items in package
 *   ->weight       Actual weight of items in package, in store weight units
 *   ->weight_units Set to store default, taken from uc_weight_unit variable
 *   ->shipweight   Computed weight of package, including markup
 *
 * Store weight units are used internally for computation of package weights.
 * Each product may have its own weight units; these are converted to store
 * units and the package shipweight is returned in terms of the store weight
 * units. The store weight units are saved in the $package object for
 * completeness.
 *
 * @param $products
 *   An array of nodes of type product.
 *
 * @return
 *   An array of package objects, each containing one or more of the products.
 */
function uc_packaging_package_products($products) {
  $packages = array();

  // Determine maximum weight of products we can put into one package
  // while staying below PACKAGE_WEIGHT_LIMIT_LBS.  This number
  // depends on the package weight markup set in the FedEx module
  // administration menu.
  $products_max_weight = PACKAGE_WEIGHT_LIMIT_LBS;
  $zero_markup = uc_fedex_weight_markup(0);
  if ($zero_markup == 0) {
    // Weight markup is a multiplier, because 0 * multiplier = 0
    // This handles percentage markup too
    $products_max_weight = $products_max_weight / uc_fedex_weight_markup(1);
  }
  else {
    // Weight markup is an additive factor , because 0 + factor = factor != 0
    $products_max_weight = $products_max_weight - $zero_markup;
  }

  // Convert $products_max_weight (which is defined in LB units) into store
  // default weight units so we can perform all calculations and return all
  // results in store default weight units
  $products_max_weight = $products_max_weight * uc_weight_conversion('LB', variable_get('uc_weight_unit', 'LB'));

  if (variable_get('uc_fedex_all_in_one', TRUE)) {
    // All products in one package, break by weight

    // Create first package
    $package = new stdClass();
    $package->quantity     = 0;
    $package->price        = 0.0;
    $package->weight       = 0.0;
    $package->weight_units = variable_get('uc_weight_unit', 'LB');

    // Loop over products
    foreach ($products as $product) {
      // Get item weight. Weight units are set on a per-product basis, so
      // we convert as necessary in order to perform all calculations in the
      // store weight units.
      $item_weight = $product->weight * uc_weight_conversion($product->weight_units, variable_get('uc_weight_unit', 'LB'));

      if ($item_weight >= $products_max_weight) {
        // This product is too heavy to ship via FexEx Ground or FedEx Express -
        // quit with error
        return array();
      }

      // Loop over qty of each product
      for ($item=0; $item<$product->qty; $item++) {
        // Test to see if putting this item into the current package put us
        // over the weight limit
        if (($package->weight + $item_weight) < $products_max_weight) {
          // No?  Then update the package information and continue
          $package->quantity += 1;
          $package->price    += $product->price;
          $package->weight   += $item_weight;
        }
        else {
          // If weight >= maximum allowed weight, save current package to
          // array and start a new package:

          // First, markup weight of current package
          $package->shipweight = uc_fedex_weight_markup($package->weight);

          // Second, save current package to array
          $packages[] = $package;

          // Finally, start a new package
          $package = new stdClass();
          $package->quantity     = 1;
          $package->price        = $product->price;
          $package->weight       = $item_weight;
          $package->weight_units = variable_get('uc_weight_unit', 'LB');
        }
      }
    }

    // No more products left to package
    // Take care of the partially-filled package we were working on

    // First, markup weight of partially-filled package
    $package->shipweight = uc_fedex_weight_markup($package->weight);

    // Second, save the partially-filled package to the array and exit
    $packages[] = $package;
  }
  else { // variable_get('uc_fedex_all_in_one', TRUE) == FALSE
    // Each product line item in its own package, subject only to pkg_qty

    // Loop over products
    foreach ($products as $product) {
      // If pkg_qty == 0 we assume no limit on package quantity
      if (!$product->pkg_qty) {
        // Put all of this product line item into one package
        $product->pkg_qty = $product->qty;
      }
      // Calculate number of full packages
      $num_of_pkgs = (int)($product->qty / $product->pkg_qty);
      if ($num_of_pkgs) {
        for ($i=0; $i<$num_of_pkgs; $i++) {
          // Create full packages
          $package = new stdClass();
          $package->quantity     = $product->pkg_qty;
          $package->price        = $product->price  * $product->pkg_qty;
          $package->weight       = $product->weight * $product->pkg_qty;
          $package->weight_units = variable_get('uc_weight_unit', 'LB');

          // Markup weight on a per-package basis
          $package->shipweight = uc_fedex_weight_markup($package->weight);

          // Save current package to array
          $packages[] = $package;
        }
      }
      // Deal with the remaining partially-full package
      $remaining_qty = $product->qty % $product->pkg_qty;
      if ($remaining_qty) {
        // Create partially-full packages
        $package = new stdClass();
        $package->quantity     = $remaining_qty;
        $package->price        = $product->price  * $remaining_qty;
        $package->weight       = $product->weight * $remaining_qty;
        $package->weight_units = variable_get('uc_weight_unit', 'LB');

        // Markup weight on a per-package basis
        $package->shipweight = uc_fedex_weight_markup($package->weight);

        // Save package to array
        $packages[] = $package;
      }
    }
  }

  return $packages;
}
